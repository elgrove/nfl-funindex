[tool.poetry]
name = "nfl"
version = "0.1.0"
description = ""
authors = ["alvgrv <aaron.lovegrove@essentia-analytics.com>"]


[tool.poetry.dependencies]
python = ">=3.9, <3.10"
beautifulsoup4 = "^4.11.1"
lxml = "^4.9.1"
requests = "^2.28.1"
pandas = "^1.5.0"
html5lib = "^1.1"
jinja2 = "^3.1.2"


[tool.poetry.group.dev.dependencies]
boto3 = "1.24.80"              # comes for free in Lambdas, doesn't need to be in the deployment
black = "^23.7.0"
chalice = "1.27.3"             # only used for deployment
darglint = "^1.8.0"
docformatter = "^1.7.2"
flake8 = "^6.1.0"
flake8-bandit = "^4.1.1"
flake8-bugbear = "^23.0.0"
flake8-docstrings = "^1.6.0"
flake8-fixme = "^1.1.1"
flake8-print = "^4.0.0"
flake8-pyproject = "^1.2.3"
flake8-pytest-style = "^1.6.0"
isort = "^5.12.0"
pylint = "^2.13.7"
pytest = "^7.2.0"
pytest-env = "^0.8.2"
pytest-cases = "^3.6.11"
pytest-mock = "^3.7.0"
pytest-socket = "^0.5.1"

[tool.black]
target-version = ['py38']
line-length = 88

[tool.isort]
py_version = 38
profile = "black"
force_sort_within_sections = "True"
src_paths = ["src", "tests"]

[tool.flake8]
select = ['B', 'D', 'T', 'E', 'F', 'S', 'M', 'C']
# B = bugbear, checks for code smells
# D = flake8-docstrings, checks docstrings are present and correct
# T = flake8-print, checks for print statements
# E = pycodestyle error level (W = warning level)
# F = pyflakes, checks for errors in code
# S = flake8-bandit, security
# M = flake8-mock, checks for nonexistent mock assert calls
# C = flake8-mccabe, checks for overly complex code
ignore = ['D100', 'D104', 'D2', 'D415', 'E501']
# D100 = missing docstring at top of module file
# D104 = missing docstring in package __init__.py
# D2 = whole class (D2**) of docstring formatting issues
# D415 = docstring first line must end with a full stop
# E501 = line-too-long
application-import-names = ['project_template', 'tests']
docstring-convention = 'google'
strictness = 'long'                                      # darglint docstring strictness
max-line-length = 88
max-complexity = 10

[tool.pytest.ini_options]
markers = [
  "functional: mark a test as a functional test",
  "integration: mark as end-to-end integration test.",                 # are not run in the pipeline
  "smoke: mark as key tests that shoud cover key or fragile features",
  "unit: mark a test as a unit test",
]
env = []

[tool.pylint.messages_control]
disable = ['C0301', 'C0114', 'R0903']
# C0114 = missing-module-docstring
# C0301 = line-too-long
# R0903 = too-few-public-methods

[tool.pylint.format]
max-module-lines = 1000

[tool.pylint.master]
jobs = 0

[tool.pylint.reports]
msg-template = "{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"
reports = "no"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
